@using Pastures2019.Controllers
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["Charts"];
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@await Html.PartialAsync("_StylesTabAndShart")
<link href="~/lib/сhart.js/dist/Chart.css" rel="stylesheet" />
<script src="~/lib/сhart.js/dist/Chart.js"></script>

<input id="objectid" type="hidden" value="@ViewBag.objectid" />

<section class="jumbotron text-center p-3">
    <div class="container-fluid">
        <h3 id="valueAllocationNumber"></h3>
        <h5 class="card-title" id="valueOtdel"></h5>
        <p class="lead" id="valuePClass"></p>
        <p class="lead" id="valueGroup"></p>
    </div>
</section>
<div class="container">
    <div class="row align-items-end">
        <div class="col-md-3 order-md-2 mb-4">
            <div class="card bg-light">
                <h6 class="card-header text-muted">@SharedLocalizer["Parameters"]:</h6>
                <div class="card-body p-2">
                    <form>
                        <div class="form-group m-0">
                            <label for="sourceproduct2">@SharedLocalizer["Satellite"]</label>
                            <select class="form-control form-control-sm" id="sourceproduct2">
                                <option value="MOLT_MOD13Q1006">Terra MODIS 16-day</option>
                                <option value="MOLA_MYD13Q1006">Aqua MODIS 16-day</option>
                            </select>
                            <label for="dataset2">@SharedLocalizer["Dataset"]</label>
                            <select class="form-control form-control-sm" id="dataset2">
                                <option value="NDVI">NDVI</option>
                                <option value="Anomaly">@SharedLocalizer["Anomaly"]</option>
                            </select>
                            <label for="monthstart2">@SharedLocalizer["StartMonth"]</label>
                            <select class="form-control form-control-sm" id="monthstart2">
                                <option value="1" selected>1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                                <option value="5">5</option>
                                <option value="6">6</option>
                                <option value="7">7</option>
                                <option value="8">8</option>
                                <option value="9">9</option>
                                <option value="10">10</option>
                                <option value="11">11</option>
                                <option value="12">12</option>
                            </select>
                            <label for="monthscount2">@SharedLocalizer["NumberOfMonths"]</label>
                            <select class="form-control form-control-sm mb-2" id="monthscount2">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                                <option value="5">5</option>
                                <option value="6">6</option>
                                <option value="7">7</option>
                                <option value="8">8</option>
                                <option value="9">9</option>
                                <option value="10">10</option>
                                <option value="11">11</option>
                                <option value="12" selected>12</option>
                            </select>
                            @for (int y = 2000; y <= DateTime.Today.Year; y++)
                            {
                                string checkboxid = "year" + y.ToString();
                                if (y != DateTime.Today.Year)
                                {
                                    <input type="checkbox" id="@checkboxid" name="chart2years" value="@y.ToString()">
                                }
                                else
                                {
                                    <input type="checkbox" id="@checkboxid" name="chart2years" value="@y.ToString()" checked>
                                }
                                <label for="@checkboxid">@y.ToString()</label>
                            }
                            <input type="button" class="btn btn-primary btn-sm btn-block mt-3" onclick="Chart2()" value="@SharedLocalizer["Refresh"]" />
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-9 order-md-1">
            <nav>
                <div class="nav nav-tabs" id="nav-tabchart2" role="tablist">
                    <a class="nav-item nav-link active" id="nav-chart2-tab" data-toggle="tab" href="#nav-chart2" role="tab" aria-controls="nav-chart2" aria-selected="true">@SharedLocalizer["Chart"]</a>
                    <a class="nav-item nav-link" id="nav-chart2table-tab" data-toggle="tab" href="#nav-chart2table" role="tab" aria-controls="nav-chart2table" aria-selected="false">@SharedLocalizer["Table"]</a>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="nav-chart2" role="tabpanel" aria-labelledby="nav-chart2-tab">
                    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center m-2">
                        <h5 class="font-weight-light">@SharedLocalizer["TimeSequence"]</h5>
                        <div class="btn-toolbar mb-2 mb-md-0">
                            <div class="btn-group mr-2">
                                <button id="download-pdf" onclick="saveAsPDF1();" type="button" class="btn btn-sm btn-outline-secondary"><i class="SomeInfo fa fa-file-image-o" InfoTitle="Export to PDF"> PDF</i></button>
                                <button id="excelbutton" type="button" class="btn btn-sm btn-outline-secondary"><i class="SomeInfo fa fa-file-excel-o" InfoTitle="Export to Excel"> Excel</i></button>
                            </div>
                        </div>
                    </div>
                    <canvas class="my-4 w-100 chartjs-render-monitor" id="chart2Canvas" width="600" height="400"></canvas>
                </div>
                <div class="tab-pane fade" id="nav-chart2table" role="tabpanel" aria-labelledby="nav-chart2table-tab">
                    <div class="card-body overflow-auto" style="max-height: 38rem">
                        <div class="table-responsive-md">
                            <table class="table table-bordered table-striped table-sm small" id="TableContent2">
                                <tbody id="table2">

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr class="my-4 border-info">
    <div class="row align-items-start">
        <div class="col-md-3 order-md-2 mb-4 mt-5">
            <div class="card bg-light">
                <h6 class="card-header text-muted">@SharedLocalizer["Parameters"]:</h6>
                <div class="card-body p-2">
                    <form>
                        <div class="form-group m-0">
                            <label for="sourceproduct3">@SharedLocalizer["Satellite"]</label>
                            <select class="form-control form-control-sm" id="sourceproduct3">
                                <option value="MOLT_MOD13Q1006">Terra MODIS 16-day</option>
                                <option value="MOLA_MYD13Q1006">Aqua MODIS 16-day</option>
                            </select>
                            <label for="yearstart3">@SharedLocalizer["StartYear"]</label>
                            <select class="form-control form-control-sm" id="yearstart3">
                                @for (int y = 2000; y <= DateTime.Today.Year; y++)
                                {
                                    if (y == DateTime.Today.Year - 10)
                                    {
                                        <option value="@y" selected>@y.ToString()</option>
                                    }
                                    else
                                    {
                                        <option value="@y">@y.ToString()</option>
                                    }
                                }
                            </select>
                            <label for="yearfinish3">@SharedLocalizer["EndYear"]</label>
                            <select class="form-control form-control-sm" id="yearfinish3">
                                @for (int y = 2000; y <= DateTime.Today.Year; y++)
                                {
                                    if (y == DateTime.Today.Year)
                                    {
                                        <option value="@y" selected>@y.ToString()</option>
                                    }
                                    else
                                    {
                                        <option value="@y">@y.ToString()</option>
                                    }
                                }
                            </select>
                            <label for="type3">@SharedLocalizer["Type"]</label>
                            <select class="form-control form-control-sm" id="type3">
                                <option value="median">@SharedLocalizer["median"]</option>
                                <option value="minimum">@SharedLocalizer["minimum"]</option>
                                <option value="maximum">@SharedLocalizer["maximum"]</option>
                            </select>
                            <input type="button" class="btn btn-primary btn-sm btn-block mt-3" onclick="Chart3()" value="@SharedLocalizer["Refresh"]" />
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-9 order-md-1">
            <nav>
                <div class="nav nav-tabs" id="nav-tabchart3" role="tablist">
                    <a class="nav-item nav-link active" id="nav-chart3-tab" data-toggle="tab" href="#nav-chart3" role="tab" aria-controls="nav-chart3" aria-selected="true">@SharedLocalizer["Chart"]</a>
                    <a class="nav-item nav-link" id="nav-chart3table-tab" data-toggle="tab" href="#nav-chart3table" role="tab" aria-controls="nav-chart3table" aria-selected="false">@SharedLocalizer["Table"]</a>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="nav-chart3" role="tabpanel" aria-labelledby="nav-chart3-tab">
                    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center m-2">
                        <h5 class="font-weight-light">@SharedLocalizer["HistoricalTimeSeries"]</h5>
                        <div class="btn-toolbar mb-2 mb-md-0">
                            <div class="btn-group mr-2">
                                <button id="download-pdf" onclick="saveAsPDF2();" type="button" class="btn btn-sm btn-outline-secondary"><i class="SomeInfo fa fa-file-image-o" InfoTitle="Export to PDF"> PDF</i></button>
                                <button id="excelbutton3" type="button" class="btn btn-sm btn-outline-secondary"><i class="SomeInfo fa fa-file-excel-o" InfoTitle="Export to Excel"> Excel</i></button>
                            </div>
                        </div>
                    </div>
                    <canvas class="my-4 w-100 chartjs-render-monitor" id="chart31Canvas" width="600" height="200"></canvas>
                    <hr class="my-0 border-light">
                    <canvas class="my-4 w-100 chartjs-render-monitor" id="chart32Canvas" width="600" height="200"></canvas>
                </div>
                <div class="tab-pane fade" id="nav-chart3table" role="tabpanel" aria-labelledby="nav-chart3table-tab">
                    <div class="card-body overflow-auto" style="max-height: 38rem">
                        <div class="table-responsive-md">
                            <table class="table table-bordered table-striped table-sm small" id="TableContent3">
                                <tbody id="table3">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr class="my-4 border-info">
</div>


<script>
    var chart1 = null;
    function Chart1() {
        $.ajax({
            url: '@Url.Action("GetChart1Data")',
            data: {
                objectid: $('#objectid').val(),
                sourceproduct: $('#sourceproduct1').val(),
                dataset: $('#dataset1').val(),
                yearstart: $('#yearstart1').val(),
                yearfinish: $('#yearfinish1').val()
            },
            type: 'POST',
            success: function (data) {
                var chart1Data = {
                    labels: data.labels,
                    datasets: [
                        {
                            label: '@Html.Raw(SharedLocalizer["median"])',
                            backgroundColor: 'rgba(100, 170, 43, 1)',
                            data: data.years_median
                        }]
                };
                var ctx1 = document.getElementById('chart1Canvas').getContext('2d');
                if (chart1 != null) {
                    chart1.destroy();
                }
                chart1 = new Chart(ctx1, {
                    type: 'bar',
                    data: chart1Data,
                    options: {
                        responsive: true,
                        scales: {
                            xAxes: [{
                                gridLines: {
                                   display: true,
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    max: 0.8,
                                    min: 0,
                                    stepSize: 0.2
                                }
                            }]
                        },
                        title: {
                            display: true,
                            fontSize: 14,
                            fontFamily: 'Arial',
                            fontColor: '#1A1A1A',
                            fontStyle: 'bold',
                            text: [$('#sourceproduct2 option:selected').text() + ', ' + $('#dataset2 option:selected').text() + '. ']
                        },
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                fontColor: 'rgb(26, 26, 26)'
                            }
                        }
                    }
                });

                $('#table1 tr').not(':first').remove();
                var html = '';
                for (var i = 0; i < data.labels.length; i++) {
                    html += '<tr><td>' + data.labels[i]
                        + '</td><td>' + data.years_min[i]
                        + '</td><td>' + data.years_max[i]
                        + '</td><td>' + data.years_median[i] + '</td></tr>';
                }
                $('#table1 tr').first().after(html);
            },
            error: function () {
                console.log('Error chart 1');
            }
        });
    }

    var chart2 = null;
    function Chart2() {
        $('#valueAllocationNumber').text('@Html.Raw(SharedLocalizer["AllocationNumber"]): @Html.Raw(ViewBag.pasturepol.group_id)' + '. ');
        $('#valueOtdel').text('@Html.Raw(SharedLocalizer["Otdel"]): @Html.Raw(ViewBag.pasturepol.otdel)' + '. ');
        $('#valuePClass').text('@Html.Raw(SharedLocalizer["PClass"]): @Html.Raw(ViewBag.pasturepol.ptype)' + '. ');
        $('#valueGroup').html('@Html.Raw(SharedLocalizer["Group"]): @Html.Raw(ViewBag.pasturepol.group)' + ' (' + '<em>@Html.Raw(ViewBag.pasturepol.group_lat)</em>' + ')');
        var chart2years = [];
        $("input:checkbox[name=chart2years]:checked").each(function(){
            chart2years.push($(this).val());
        });
        $.ajax({
            url: '@Url.Action("GetChart2Data")',
            data: {
                objectid: $('#objectid').val(),
                sourceproduct: $('#sourceproduct2').val(),
                dataset: $('#dataset2').val(),
                monthstart: $('#monthstart2').val(),
                monthscount: $('#monthscount2').val(),
                years: chart2years
            },
            type: 'POST',
            success: function (data) {
                var chart2Data = {
                    labels: data.labels,
                    datasets: [
                        {
                            label: '@Html.Raw(SharedLocalizer["minimum"])',
                            borderColor: 'rgba(212, 212, 212, 1)',
                            borderWidth: 1,
                            pointRadius: 0,
                            data: data.years_min,
                            fill: "+1"
                        },
                        {
                            label: '@Html.Raw(SharedLocalizer["maximum"])',
                            borderColor: 'rgba(212, 212, 212, 3)',
                            borderWidth: 1,
                            pointRadius: 0,
                            data: data.years_max,
                            fill: false
                        },
                        {
                            label: '@Html.Raw(SharedLocalizer["median"])',
                            borderColor: 'rgba(0, 0, 0, 1)',
                            borderWidth: 4,
                            pointRadius: 0,
                            data: data.years_median,
                            fill: false
                        }]
                };
                for (var i = 0; i < data.year_median_datasets.length; ++i) {
                    var color = random_rgba();
                    chart2Data.datasets.push({
                        label: data.year_median_datasets[i].year + ' @Html.Raw(SharedLocalizer["median"])',
                        backgroundColor: color,
                        borderColor: color,
                        data: data.year_median_datasets[i].data,
                        fill: false
                    });
                }
                var ctx2 = document.getElementById('chart2Canvas').getContext('2d');
                if (chart2 != null) {
                    chart2.destroy();
                }
                chart2 = new Chart(ctx2, {
                    type: 'line',
                    data: chart2Data,
                    options: {
                        responsive: true,
                        elements: {
                            point: {
                                radius: 2
                            }
                        },
                        title: {
                            display: true,
                            fontSize: 14,
                            fontFamily: 'Arial',
                            fontColor: '#1A1A1A',
                            fontStyle: 'bold',
                            text: [$('#sourceproduct2 option:selected').text() + ', ' + $('#dataset2 option:selected').text() + '. ']
                        },
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                fontColor: 'rgb(26, 26, 26)'
                            }
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    max: 0.8,
                                    min: -0.2,
                                    stepSize: 0.2
                                }
                            }],
                            xAxes: [{
                                gridLines: {
                                   display: true,
                                },
                            }]
                        }
                    }
                });

                $('#table2 tr').remove();
                var html = '<tr class="table-primary"><th scope="col">@SharedLocalizer["Date"]'
                    + '</th><th scope="col">@SharedLocalizer["minimum"]'
                    + '</th><th scope="col">@SharedLocalizer["maximum"]'
                    + '</th><th scope="col">@SharedLocalizer["median"]';
                for (var i = 0; i < data.year_min_datasets.length; ++i) {
                    html += '</th><th>' + data.year_min_datasets[i].year + ' @Html.Raw(SharedLocalizer["minimum"])';
                }
                for (var i = 0; i < data.year_max_datasets.length; ++i) {
                    html += '</th><th>' + data.year_max_datasets[i].year + ' @Html.Raw(SharedLocalizer["maximum"])';
                }
                for (var i = 0; i < data.year_median_datasets.length; ++i) {
                    html += '</th><th>' + data.year_median_datasets[i].year + ' @Html.Raw(SharedLocalizer["median"])';
                }
                html += '</th></tr>'
                for (var i = 0; i < data.labels.length; i++) {
                    html += '<tr ><th scope="row">' + data.labels[i]
                        + '</th><td>' + parseFloat(data.years_min[i]).toFixed(3)
                        + '</td><td>' + parseFloat(data.years_max[i]).toFixed(3)
                        + '</td><td>' + parseFloat(data.years_median[i]).toFixed(3);
                    for (var j = 0; j < data.year_min_datasets.length; ++j) {
                        html += '</td><td>' + (data.year_min_datasets[j].data[i] == null ? '' : parseFloat(data.year_min_datasets[j].data[i]).toFixed(3));
                    }
                    for (var j = 0; j < data.year_max_datasets.length; ++j) {
                        html += '</td><td>' + (data.year_max_datasets[j].data[i] == null ? '' : parseFloat(data.year_max_datasets[j].data[i]).toFixed(3));
                    }
                    for (var j = 0; j < data.year_median_datasets.length; ++j) {
                        html += '</td><td>' + (data.year_median_datasets[j].data[i] == null ? '' : parseFloat(data.year_median_datasets[j].data[i]).toFixed(3));
                    }
                    html += '</td></tr>';
                }
                $('#table2').append(html);
            },
            error: function () {
                console.log('Error chart 2');
            }
        });
    }

    var chart31 = null,
        chart32 = null;
    function Chart3() {
        $.ajax({
            url: '@Url.Action("GetChart3Data")',
            data: {
                objectid: $('#objectid').val(),
                sourceproduct: $('#sourceproduct3').val(),
                yearstart: $('#yearstart3').val(),
                yearfinish: $('#yearfinish3').val()
            },
            type: 'POST',
            success: function (data) {
                var chart31Data = {};
                if ($('#type3').val() == 'minimum') {
                    chart31Data = {
                        labels: data.labelsx,
                        datasets: [
                            {
                                type: 'line',
                                label: '@Html.Raw(SharedLocalizer["minimum"]) (@Html.Raw(SharedLocalizer["average"]))',
                                borderColor: 'rgba(0, 0, 0, 1)',
                                borderWidth: 2,
                                data: data.years_avg_min,
                                fill: false
                            },
                            {
                                type: 'bar',
                                label: '@Html.Raw(SharedLocalizer["minimum"])',
                                backgroundColor: 'rgba(255, 217, 0, 1)',
                                borderColor: 'rgba(255, 217, 0, 1)',
                                data: data.years_min
                            }
                        ]
                    };
                }
                else if ($('#type3').val() == 'maximum') {
                    chart31Data = {
                        labels: data.labelsx,
                        datasets: [
                            {
                                type: 'line',
                                label: '@Html.Raw(SharedLocalizer["maximum"]) (@Html.Raw(SharedLocalizer["average"]))',
                                borderColor: 'rgba(0, 0, 0, 1)',
                                borderWidth: 2,
                                data: data.years_avg_max,
                                fill: false
                            },
                            {
                                type: 'bar',
                                label: '@Html.Raw(SharedLocalizer["maximum"])',
                                backgroundColor: 'rgba(49, 119, 0, 1)',
                                borderColor: 'rgba(49, 119, 0, 1)',
                                data: data.years_max
                            }
                        ]
                    };
                }
                else if ($('#type3').val() == 'median') {
                    chart31Data = {
                        labels: data.labelsx,
                        datasets: [
                            {
                                type: 'line',
                                label: '@Html.Raw(SharedLocalizer["median"]) (@Html.Raw(SharedLocalizer["average"]))',
                                borderColor: 'rgba(0, 0, 0, 1)',
                                borderWidth: 2,
                                data: data.years_avg_median,
                                fill: false
                            },
                            {
                                type: 'bar',
                                label: '@Html.Raw(SharedLocalizer["median"])',
                                backgroundColor: 'rgba(100, 170, 43, 1)',
                                borderColor: 'rgba(100, 170, 43, 1)',
                                data: data.years_median
                            }]
                    };
                }
                var ctx31 = document.getElementById('chart31Canvas').getContext('2d');
                if (chart31 != null) {
                    chart31.destroy();
                }
                chart31 = new Chart(ctx31, {
                    type: 'bar',
                    data: chart31Data,
                    options: {
                        responsive: true,
                        elements: {
                            point: {
                                radius: 0
                            }
                        },
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                fontColor: 'rgb(26, 26, 26)'
                            }
                        },
                        scales: {
                            xAxes: [{
                                stacked: true,
                                ticks: {
                                    autoSkip : false,
                                    callback: function (value, index, values) {
                                        if (value == '') {
                                            return null;
                                        }
                                        else {
                                            return value;
                                        }
                                    }
                                }
                            }],
                            yAxes: [{
                                stacked: true,
                                ticks: {
                                    max: 0.8,
                                    min: 0,
                                    stepSize: 0.1
                                }
                            }]
                        },
                        title: {
                            display: true,
                            fontSize: 14,
                            fontFamily: 'Arial',
                            fontColor: '#1A1A1A',
                            fontStyle: 'bold',
                            text: [$('#sourceproduct3 option:selected').text() + ', NDVI. ']
                        },
                        tooltips: {
                            callbacks: {
                                title: function (tooltipItem, datac) {
                                    return data.labels[tooltipItem[0].index];
                                }
                            }
                        }
                    }
                });

                var chart32Data = {};
                var color_a = [];
                if ($('#type3').val() == 'minimum') {
                    for (i = 0; i < data.years_min_a.length; i++) {
                        if (data.years_min_a[i] > 0) {
                            color_a.push('rgba(0, 215, 0, 1)');
                        }
                        else {
                            color_a.push('rgba(215, 0, 0, 1)')
                        }
                    }
                    chart32Data = {
                        labels: data.labelsx,
                        datasets: [
                            {
                                label: '@Html.Raw(SharedLocalizer["minimum"])',
                                backgroundColor: color_a,
                                borderColor: 'rgba(215, 215, 215, 1)',
                                borderWidth: 1,
                                data: data.years_min_a,

                            }
                        ]
                    };
                }
                else if ($('#type3').val() == 'maximum') {
                    for (i = 0; i < data.years_max_a.length; i++) {
                        if (data.years_max_a[i] > 0) {
                            color_a.push('rgba(0, 215, 0, 1)');
                        }
                        else {
                            color_a.push('rgba(215, 0, 0, 1)')
                        }
                    }
                    chart32Data = {
                        labels: data.labelsx,
                        datasets: [
                            {
                                label: '@Html.Raw(SharedLocalizer["maximum"])',
                                backgroundColor: color_a,
                                borderColor: 'rgba(215, 215, 215, 1)',
                                borderWidth: 1,
                                data: data.years_max_a
                            }
                        ]
                    };
                }
                else if ($('#type3').val() == 'median') {
                    for (i = 0; i < data.years_median_a.length; i++) {
                        if (data.years_median_a[i] > 0) {
                            color_a.push('rgba(0, 215, 0, 1)');
                        }
                        else {
                            color_a.push('rgba(215, 0, 0, 1)')
                        }
                    }
                    chart32Data = {
                        labels: data.labelsx,
                        datasets: [
                            {
                                label: '@Html.Raw(SharedLocalizer["median"])',
                                backgroundColor: color_a,
                                borderColor: 'rgba(215, 215, 215, 1)',
                                borderWidth: 1,
                                data: data.years_median_a
                            }]
                    };
                }

                var ctx32 = document.getElementById('chart32Canvas').getContext('2d');
                if (chart32 != null) {
                    chart32.destroy();
                }
                chart32 = new Chart(ctx32, {
                    type: 'bar',
                    data: chart32Data,
                    options: {
                        responsive: true,
                        scales: {
                            xAxes: [{
                                stacked: true,
                                ticks: {
                                    autoSkip : false,
                                    callback: function (value, index, values) {
                                        if (value == '') {
                                            return null;
                                        }
                                        else {
                                            return value;
                                        }
                                    }
                                }
                            }],
                            yAxes: [{
                                stacked: true
                            }]
                        },
                        title: {
                            display: true,
                            fontSize: 14,
                            fontFamily: 'Arial',
                            fontColor: '#1A1A1A',
                            fontStyle: 'bold',
                            text: [$('#sourceproduct3 option:selected').text() + ', @Html.Raw(SharedLocalizer["Anomaly"]). ']
                        },
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: {
                                fontColor: 'rgb(26, 26, 26)'
                            }
                        },
                        tooltips: {
                            callbacks: {
                                title: function (tooltipItem, datac) {
                                    return data.labels[tooltipItem[0].index];
                                }
                            }
                        }
                    }
                });

                $('#table3 tr').remove();
                var html = '<tr class="table-primary"><th scope="col">@SharedLocalizer["Date"]'
                    + '</th><th scope="col">NDVI ' + $("#type3 option:selected").text() + ' (@SharedLocalizer["average"])'
                    + '</th><th scope="col">NDVI ' + $("#type3 option:selected").text()
                    + '</th><th scope="col">@SharedLocalizer["Anomaly"] ' + $("#type3 option:selected").text() + '</th></tr>';
                for (var i = 0; i < data.labels.length; i++) {
                    if ($('#type3').val() == 'minimum') {
                        html += '<tr><th scope="row">' + data.labels[i]
                            + '</th><td>' + data.years_avg_min[i].toFixed(3)
                            + '</td><td>' + data.years_min[i].toFixed(3)
                            + '</td><td>' + data.years_min_a[i].toFixed(3) + '</td></tr>';
                    }
                    else if ($('#type3').val() == 'maximum') {
                        html += '<tr><th scope="row">' + data.labels[i]
                            + '</th><td>' + data.years_avg_max[i].toFixed(3)
                            + '</td><td>' + data.years_max[i].toFixed(3)
                            + '</td><td>' + data.years_max_a[i].toFixed(3) + '</td></tr>';
                    }
                    else if ($('#type3').val() == 'median') {
                        html += '<tr><th scope="row">' + data.labels[i]
                            + '</th><td>' + data.years_avg_median[i].toFixed(3)
                            + '</td><td>' + data.years_median[i].toFixed(3)
                            + '</td><td>' + data.years_median_a[i].toFixed(3) + '</td></tr>';
                    }
                }
                $('#table3').append(html);
            },
            error: function () {
                console.log('Error chart 3');
            }
        });
    }

    function random_rgba() {
        var o = Math.round, r = Math.random, s = 255;
        return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',1)';
    }
</script>

<script>
    $(document).ready(function () {
        Chart2();
        Chart3();
    });
    //add button to generate PDF
    function saveAsPDF1() {
        html2canvas(document.getElementById("chart2Canvas"), {
            onrendered: function (canvas) {
                // get size of report page
                var reportPageHeight = 430;
                var reportPageWidth = 650;
                var img = canvas.toDataURL(); //image data of canvas
                var doc = new jsPDF('a4', 'pt', [reportPageWidth, reportPageHeight]);
                doc.addImage(img, 10, 10);
                doc.save('NDVI.pdf');
            }
        });
    }
    function saveAsPDF2() {
        html2canvas(document.getElementById("nav-chart3"), {
            onrendered: function (canvas) {
                // get size of report page
                var reportPageHeight = 500;
                var reportPageWidth = 670;
                var img = canvas.toDataURL(); //image data of canvas
                var doc = new jsPDF('a4', 'pt', [reportPageWidth, reportPageHeight]);
                doc.addImage(img, 10, 10);
                doc.save('NDVI_Hist.pdf');
            }
        });
    }
    // function for export table
    var $table = $('#TableContent1')
    var $excelbutton = $('#excelbutton')
    $(function () {
        $excelbutton.click(function () {
            $('#TableContent1').tableExport({type:'csv'});
        })
    })
    var $excelbutton3 = $('#excelbutton3')
    $(function () {
        $excelbutton3.click(function () {
            $('#TableContent3').tableExport({type:'csv'});
        })
    })
</script>