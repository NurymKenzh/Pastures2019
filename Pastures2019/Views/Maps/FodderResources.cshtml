@using Pastures2019.Controllers
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["FodderResources"];
    Layout = "~/Views/Shared/_LayoutMap.cshtml";
}
<link href="~/lib/ol/ol.css" rel="stylesheet" />
<link rel="stylesheet" href="~/lib/vendor/font-awesome/css/font-awesome.min.css" />
<script src="~/lib/ol/ol.js"></script>
<link href="~/lib/vendor/jBox/dist/jBox.all.css" rel="stylesheet" />
<script src="~/lib/vendor/jBox/dist/jBox.all.js"></script>
<link href="~/lib/сhart.js/dist/Chart.css" rel="stylesheet" />
<script src="~/lib/сhart.js/dist/Chart.js"></script>

<div class="container-fluid sticky-top p-0">
    <div style="width: 1000px; height: 400px;">
        <canvas  id="chart" width="900" height="380"></canvas>
    </div>
    <!-- Sidebar -->
    <nav class="sidebar border border-light">
        <div class="page-wrapper chiller-theme">
            <!-- close sidebar menu -->
            <div class="dismiss">
                <i class="fa fa-arrow-left"></i>
            </div>
            <div class="logo">
                <h3>Pasture</h3>
            </div>
            <div class="col">
                <form>
                </form>
            </div>
            <!-- Exaple 1 -->
            <div class="treeextent scrollbar-deep-purple bordered-deep-purple thin">
                <div class="card-body">
                    @Html.DropDownList("Otdel", (IEnumerable<SelectListItem>)ViewBag.Otdel, "", htmlAttributes: new { @id = "find_otdel" })
                    @Html.DropDownList("PType", (IEnumerable<SelectListItem>)ViewBag.PType, "", htmlAttributes: new { @id = "find_ptype" })
                    @Html.DropDownList("Soob", (IEnumerable<SelectListItem>)ViewBag.Soob, "", htmlAttributes: new { @id = "find_soob" })
                    <input id="find_ur_v_from" type="text" />
                    <input id="find_ur_v_to" type="text" />
                    <input id="find_ur_l_from" type="text" />
                    <input id="find_ur_l_to" type="text" />
                    <input id="find_ur_o_from" type="text" />
                    <input id="find_ur_o_to" type="text" />
                    <input id="find_ur_z_from" type="text" />
                    <input id="find_ur_z_to" type="text" />
                    @Html.DropDownList("Recommend", (IEnumerable<SelectListItem>)ViewBag.Recommend, "", htmlAttributes: new { @id = "find_recommend" })
                    @Html.DropDownList("RecomCattle", (IEnumerable<SelectListItem>)ViewBag.RecomCattle, "", htmlAttributes: new { @id = "find_recomcattle" })
                    <input type="button" value="Find" onclick="FindPastures()" />
                    <a id="FindByKato" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Find by Adm link</a>
                    <div  class="col-md-12" style="display: none" id="FilterKato">
                        <form>
                            <div class="form-group m-0">
                                <label for="cato1" class="col-sm-2 col-form-label col-form-label-sm">Adm1</label>
                                <select class="form-control form-control-sm" id="cato1" onchange="ChangeCATO1()"></select>
                            </div>
                            <div class="form-group m-0">
                                <label for="cato2" class="col-sm-2 col-form-label col-form-label-sm">Adm1</label>
                                <select class="form-control form-control-sm" id="cato2" onchange="ChangeCATO2()"></select>                                
                            </div>
                            <div class="form-group m-0">
                                <label for="cato3" class="col-sm-2 col-form-label col-form-label-sm">Adm1</label>
                                <select class="form-control form-control-sm" id="cato3" onchange="ChangeCATO3()"></select>
                            </div>
                            <input class="btn btn-primary btn-block mt-3" type="button" value="CATO Info" onclick="InfoCATO()" />
                        </form>                            
                    </div> 
                    <select id="layerBaseType" class="form-control form-control-sm" onchange="ChangeLayers()">
                        <option value="OSM">OpenStreetMap</option>
                        <option value="BingAerialWithLabels">Bing Aerial</option>
                        <option value="BingRoadStatic">Bing Road (static)</option>
                        <option value="BingRoadDynamic">Bing Road (dynamic)</option>
                        <option value="HERENormalDay">HERE Normal Day</option>
                        <option value="HERENormalDayTransit">HERE Normal Day Transit</option>
                        <option value="HERETerrainDay">HERE Terrain Day</option>
                        <option value="HEREHybridDay" selected>HERE Hybrid Day</option>
                        <option value="StamenWatercolor">Stamen Watercolor</option>
                        <option value="StamenTerrain">Stamen Terrain</option>
                        <option value="StamenToner">Stamen Toner</option>
                        <option value="ArcGIS">ArcGIS</option>
                        <option value="ThunderforestOpenCycleMap">Thunderforest OpenCycleMap</option>
                        <option value="ThunderforestTransport">Thunderforest Transport</option>
                        <option value="ThunderforestLandscape">Thunderforest Landscape</option>
                        <option value="ThunderforestOutdoors">Thunderforest Outdoors</option>
                        <option value="ThunderforestSpinalMap">Thunderforest Spinal Map</option>
                        <option value="ThunderforestPioneer">Thunderforest Pioneer</option>
                        <option value="ThunderforestMobileAtlas">Thunderforest Mobile Atlas</option>
                        <option value="ThunderforestNeighbourhood">Thunderforest Neighbourhood</option>
                    </select>
                    <input type="checkbox" id="layerBaseShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerBaseShow">
                        @SharedLocalizer["BaseLayer"]
                    </label>
                    <input id="layerBaseOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layeradmxpolShow" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layeradmxpolShow">
                        @SharedLocalizer["admxpolLayer"]
                    </label>
                    <input id="layeradmxpolOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerhdrShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerhdrShow">
                        @SharedLocalizer["hdrLayer"]
                    </label>
                    <input id="layerhdrOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerpopShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerpopShow">
                        @SharedLocalizer["popLayer"]
                    </label>
                    <input id="layerpopOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerrdslinShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerrdslinShow">
                        @SharedLocalizer["rdslinLayer"]
                    </label>
                    <input id="layerrdslinOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerpasturepolShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerpasturepolShow">
                        @SharedLocalizer["pasturepolLayer"]
                    </label>
                    <input id="layerpasturepolOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />
                </div>
            </div>
            <!-- Exaple 1 -->
            <div class="dark-light-buttons">
                <a class="btn btn-primary btn-customized-4 btn-customized-dark" href="#" role="button">Dark</a>
                <a class="btn btn-primary btn-customized-4 btn-customized-light" href="#" role="button">Light</a>
            </div>
            <div class="sidebar-footer">
                <a href="#">
                    <i class="SomeInfo fa fa-file" InfoTitle="Tooltip on top"></i>
                </a>
                <a href="#" OnClick="Charts()" id="ChartsButton" value="Выделять" onclick="Charts()">
                    <i class="SomeInfo fa fa-bar-chart-o" InfoTitle="Для построение Графика, сначало выберите объект на карте (ВХБ или БХУ)"></i>
                    <span id="chartSpan" class="badge badge-pill badge-warning notification">0</span>
                </a>
                <a href="#" id="LegendBtn" class="target-click">
                    <i class="SomeInfo fa fa-list-alt" InfoTitle="Легенда"></i>
                </a>
                <a href="#" id="MapTitleBtn" class="target-click">
                    <i class="SomeInfo fa fa-bookmark" InfoTitle="Информация о слое"></i>
                </a>
            </div>
        </div>
    </nav>
    <!-- End sidebar -->
    <!-- Content -->
    <div class="content">
        <!-- open sidebar menu -->
        <a class="btn btn-light btn-customized open-menu" href="#" role="button">
            <i class="fa fa-align-left"></i> <span>@SharedLocalizer["Menu"]</span>
        </a>
        <!-- Map content -->
        <div id="map" class="position-fixed col-md-12 ml-sm-auto col-lg-12 p-0" style="height: calc(100% - 100px);"></div>
    </div>
    <!-- End content -->
</div>

@* layers *@
<script>
    var geoserver_url = '@ViewBag.GeoServerUrl', //'http://89.250.84.186:8080/geoserver/',
        geoserver_workspace_name = 'Pastures2019';
    var HEREappId = 'SLdBasp4s1oq2oUbVGxy';
    var HEREappCode = 'D9-h9iVhjgUB_9eUlFETXA';

    var Source_OSM = new ol.source.OSM();
    Source_BingAerialWithLabels = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'AerialWithLabels',
    });
    Source_BingRoadStatic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'Road',
    });
    Source_BingRoadDynamic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'RoadOnDemand',
    });
    var urlTpl = 'https://{1-4}.{base}.maps.cit.api.here.com' +
        '/{type}/2.1/maptile/newest/{scheme}/{z}/{x}/{y}/256/png' +
        '?app_id={app_id}&app_code={app_code}';
    function HEREcreateUrl(tpl, HERElayerDesc) {
        return tpl
            .replace('{base}', HERElayerDesc.base)
            .replace('{type}', HERElayerDesc.type)
            .replace('{scheme}', HERElayerDesc.scheme)
            .replace('{app_id}', HERElayerDesc.app_id)
            .replace('{app_code}', HERElayerDesc.app_code);
    };
    var HERElayerDescNormalDay = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });
    var HERElayerDescNormalDayTransit = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day.transit',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDayTransit = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDayTransit),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });
    var HERElayerDescTerrainDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'terrain.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERETerrainDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescTerrainDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });
    var HERElayerDescHybridDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'hybrid.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HEREHybridDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescHybridDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a href="http://developer.here.com">HERE</a>'
    });
    var Source_StamenWatercolor = new ol.source.Stamen({
        layer: 'watercolor'
    });
    var Source_StamenTerrain = new ol.source.Stamen({
        layer: 'terrain'
    });
    var Source_StamenToner = new ol.source.Stamen({
        layer: 'toner'
    });
    var Source_ArcGIS = new ol.source.XYZ({
        attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
            'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
            'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
    });
    var Source_ThunderforestOpenCycleMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestTransport = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestLandscape = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestOutdoors = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestTransportDark = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestSpinalMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestPioneer = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/pioneer/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestMobileAtlas = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestNeighbourhood = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Layer_Base = new ol.layer.Tile({
        source: Source_HEREHybridDay
    });
    Layer_Base.set('name', 'Base');
    Layer_Base.setOpacity(1);

    var url_adm1pol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_adm1pol = new ol.source.TileWMS({
        url: url_adm1pol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':adm1pol'
        },
        serverType: 'geoserver'
    });
    var Layer_adm1pol = new ol.layer.Tile({
        source: Source_adm1pol
    });
    Layer_adm1pol.set('name', 'admxpol');
    Layer_adm1pol.setVisible(false);

    var url_adm2pol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_adm2pol = new ol.source.TileWMS({
        url: url_adm2pol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':adm2pol'
        },
        serverType: 'geoserver'
    });
    var Layer_adm2pol = new ol.layer.Tile({
        source: Source_adm2pol
    });
    Layer_adm2pol.set('name', 'admxpol');
    Layer_adm2pol.setVisible(false);

    var url_adm3pol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_adm3pol = new ol.source.TileWMS({
        url: url_adm3pol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':adm3pol'
        },
        serverType: 'geoserver'
    });
    var Layer_adm3pol = new ol.layer.Tile({
        source: Source_adm3pol
    });
    Layer_adm3pol.set('name', 'admxpol');
    Layer_adm3pol.setVisible(false);

    var Layer_admXpol_Navigate = new ol.layer.Vector({
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'transparent'
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 4
            })
        })
    });
    Layer_admXpol_Navigate.set('name', 'admxpolnavigate');

    var url_hdrlin = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_hdrlin = new ol.source.TileWMS({
        url: url_hdrlin,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':hdrlin'
        },
        serverType: 'geoserver'
    });
    var Layer_hdrlin = new ol.layer.Tile({
        source: Source_hdrlin,
        maxResolution: ol.tilegrid.createXYZ().getResolution(7)
    });
    Layer_hdrlin.set('name', 'hdr');

    var url_hdrpol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_hdrpol = new ol.source.TileWMS({
        url: url_hdrpol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':hdrpol'
        },
        serverType: 'geoserver'
    });
    var Layer_hdrpol = new ol.layer.Tile({
        source: Source_hdrpol
    });
    Layer_hdrpol.set('name', 'hdr');

    var url_poppnt = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_poppnt = new ol.source.TileWMS({
        url: url_poppnt,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':poppnt'
        },
        serverType: 'geoserver'
    });
    var Layer_poppnt = new ol.layer.Tile({
        source: Source_poppnt,
        maxResolution: ol.tilegrid.createXYZ().getResolution(9)
    });
    Layer_poppnt.set('name', 'pop');

    var url_poppol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_poppol = new ol.source.TileWMS({
        url: url_poppol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':poppol'
        },
        serverType: 'geoserver'
    });
    var Layer_poppol = new ol.layer.Tile({
        source: Source_poppol
    });
    Layer_poppol.set('name', 'pop');

    var url_rdslin = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_rdslin = new ol.source.TileWMS({
        url: url_rdslin,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':rdslin'
        },
        serverType: 'geoserver'
    });
    var Layer_rdslin = new ol.layer.Tile({
        source: Source_rdslin
    });
    Layer_rdslin.set('name', 'rdslin');

    var url_pasturepol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_pasturepol = new ol.source.TileWMS({
        url: url_pasturepol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':pasturepol'
        },
        serverType: 'geoserver'
    });
    var Layer_pasturepol = new ol.layer.Tile({
        source: Source_pasturepol
    });
    Layer_pasturepol.set('name', 'pasturepol');

    var Source_select_pasturepol = new ol.source.Vector({});
    var Layer_select_pasturepol = new ol.layer.Vector({
        source: Source_select_pasturepol,
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: [0, 0, 255, 1]
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 2
            })
        })
    });
    Layer_select_pasturepol.set('name', 'pasturepol');

    var url_found_pasturepol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_found_pasturepol = new ol.source.TileWMS({
        url: url_found_pasturepol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':pasturepol',
            'STYLES': 'pasturepolfind',
        },
        serverType: 'geoserver'
    });
    var Layer_found_pasturepol = new ol.layer.Tile({
        source: Source_found_pasturepol
    });
    var filter_found = "otdely_id = 'none'";
    var filterParams_found = {
        'FILTER': null,
        'CQL_FILTER': null,
        'FEATUREID': null
    };
    if (filter_found.replace(/^\s\s*/, '').replace(/\s\s*$/, '') != "") {
          filterParams_found["CQL_FILTER"] = filter_found;
        }
    Layer_found_pasturepol.getSource().updateParams(filterParams_found);
</script>

@* map *@
<script>
    // permalink
    var zoom = 5;
    var center = ol.proj.fromLonLat([66.902, 48.714]);
    var rotation = 0;
    if (window.location.hash !== '') {
        // try to restore center, zoom-level and rotation from the URL
        var hash = window.location.hash.replace('#map=', '');
        var parts = hash.split('/');
        if (parts.length === 4) {
            zoom = parseInt(parts[0], 10);
            center = [
                parseFloat(parts[1]),
                parseFloat(parts[2])
            ];
            rotation = parseFloat(parts[3]);
        }
    }

    var map = new ol.Map({
        target: 'map',
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine()
        ]),
        layers: [
            Layer_Base,
            Layer_pasturepol,
            Layer_found_pasturepol,
            Layer_select_pasturepol,
            Layer_hdrlin,
            Layer_rdslin,
            Layer_adm1pol,
            Layer_adm2pol,
            Layer_adm3pol,
            Layer_poppol,
            Layer_poppnt,
            Layer_hdrpol
        ],
        view: new ol.View({
            center: center,
            zoom: 5,
            minZoom: 5,
            extent: [5028944.964937042, 4754994.655562972, 10214432.963802021, 7494497.74930296]
        })
    });

    // permalink
    var shouldUpdate = true;
    var view = map.getView();
    var updatePermalink = function () {
        if (!shouldUpdate) {
            // do not update the URL when the view was changed in the 'popstate' handler
            shouldUpdate = true;
            return;
        }
        var center = view.getCenter();
        var hash = '#map=' +
            view.getZoom() + '/' +
            Math.round(center[0] * 100) / 100 + '/' +
            Math.round(center[1] * 100) / 100 + '/' +
            view.getRotation();
        var state = {
            zoom: view.getZoom(),
            center: view.getCenter(),
            rotation: view.getRotation()
        };
        window.history.pushState(state, 'map', hash);
    };

    map.on('moveend', updatePermalink);

    window.addEventListener('popstate', function (event) {
        if (event.state === null) {
            return;
        }
        map.getView().setCenter(event.state.center);
        map.getView().setZoom(event.state.zoom);
        map.getView().setRotation(event.state.rotation);
        shouldUpdate = false;
    });
</script>

@* ChangeLayers *@
<script>
    function ChangeLayers() {
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') == 'Base') {
                layer.setVisible(document.getElementById("layerBaseShow").checked);
                layer.setOpacity($('#layerBaseOpacity').val() / 100)
                if ($('#layerBaseType').val() == 'OSM') {
                    layer.setSource(Source_OSM);
                }
                else if ($('#layerBaseType').val() == 'BingAerialWithLabels') {
                    layer.setSource(Source_BingAerialWithLabels);
                }
                else if ($('#layerBaseType').val() == 'BingRoadStatic') {
                    layer.setSource(Source_BingRoadStatic);
                }
                else if ($('#layerBaseType').val() == 'BingRoadDynamic') {
                    layer.setSource(Source_BingRoadDynamic);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDay') {
                    layer.setSource(Source_HERENormalDay);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDayTransit') {
                    layer.setSource(Source_HERENormalDayTransit);
                }
                else if ($('#layerBaseType').val() == 'HERETerrainDay') {
                    layer.setSource(Source_HERETerrainDay);
                }
                else if ($('#layerBaseType').val() == 'HEREHybridDay') {
                    layer.setSource(Source_HEREHybridDay);
                }
                else if ($('#layerBaseType').val() == 'StamenWatercolor') {
                    layer.setSource(Source_StamenWatercolor);
                }
                else if ($('#layerBaseType').val() == 'StamenTerrain') {
                    layer.setSource(Source_StamenTerrain);
                }
                else if ($('#layerBaseType').val() == 'StamenToner') {
                    layer.setSource(Source_StamenToner);
                }
                else if ($('#layerBaseType').val() == 'ArcGIS') {
                    layer.setSource(Source_ArcGIS);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOpenCycleMap') {
                    layer.setSource(Source_ThunderforestOpenCycleMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransport') {
                    layer.setSource(Source_ThunderforestTransport);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestLandscape') {
                    layer.setSource(Source_ThunderforestLandscape);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOutdoors') {
                    layer.setSource(Source_ThunderforestOutdoors);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransportDark') {
                    layer.setSource(Source_ThunderforestTransportDark);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestSpinalMap') {
                    layer.setSource(Source_ThunderforestSpinalMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestPioneer') {
                    layer.setSource(Source_ThunderforestPioneer);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestMobileAtlas') {
                    layer.setSource(Source_ThunderforestMobileAtlas);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestNeighbourhood') {
                    layer.setSource(Source_ThunderforestNeighbourhood);
                }
            }
            if (layer.get('name') == 'admxpol') {
                layer.setVisible(document.getElementById("layeradmxpolShow").checked);
                layer.setOpacity($('#layeradmxpolOpacity').val() / 100);
            }
            if (layer.get('name') == 'hdr') {
                layer.setVisible(document.getElementById("layerhdrShow").checked);
                layer.setOpacity($('#layerhdrOpacity').val() / 100);
            }
            if (layer.get('name') == 'pop') {
                layer.setVisible(document.getElementById("layerpopShow").checked);
                layer.setOpacity($('#layerpopOpacity').val() / 100);
            }
            if (layer.get('name') == 'rdslin') {
                layer.setVisible(document.getElementById("layerrdslinShow").checked);
                layer.setOpacity($('#layerrdslinOpacity').val() / 100);
            }
            if (layer.get('name') == 'pasturepol') {
                layer.setVisible(document.getElementById("layerpasturepolShow").checked);
                layer.setOpacity($('#layerpasturepolOpacity').val() / 100);
            }
        })
    }
</script>

@* map.on('singleclick') *@
<script>
    map.on('singleclick', function (evt) {
        Source_select_pasturepol.clear();

        var viewResolution = (map.getView().getResolution());
        var url_pasturepol = Source_pasturepol.getGetFeatureInfoUrl(
            evt.coordinate, viewResolution, 'EPSG:3857',
            {
                'INFO_FORMAT': 'text/javascript'
            });
        if (url_pasturepol) {
            jQuery.ajax({
                jsonp: false,
                jsonpCallback: 'getJson',
                type: 'GET',
                url: url_pasturepol + "&format_options=callback:getJson",
                async: false,
                dataType: 'jsonp',
                error: function () {
                }
            }).then(function (data) {
                if (Layer_pasturepol.getVisible() && data.features.length > 0) {
                    // select pasture
                    var polyFeature = new ol.Feature({
                        geometry: new ol.geom.MultiPolygon(data.features[0].geometry.coordinates)
                    });
                    Source_select_pasturepol.addFeature(polyFeature);
                    // data from pasturepol
                    var parser = new ol.format.GeoJSON();
                    var features = parser.readFeatures(data);
                    console.log('@Html.Raw(SharedLocalizer["AllocationNumber"]): ' + features[0].get('group_id'));
                    $.ajax({
                        url: '@Url.Action("GetPastureInfo")',
                        data: {
                            objectid: features[0].get('objectid')
                        },
                        type: 'POST',
                        success: function (dataDB) {
                            console.log('@Html.Raw(SharedLocalizer["Otdel"]).: ' + dataDB.pasturepol.otdel);
                            console.log('@Html.Raw(SharedLocalizer["PClass"]): ' + dataDB.pasturepol.ptype);
                            console.log('@Html.Raw(SharedLocalizer["Group"]): ' + dataDB.pasturepol.group);
                            console.log('@Html.Raw(SharedLocalizer["GroupLat"]): ' + dataDB.pasturepol.group_lat);
                            console.log('@Html.Raw(SharedLocalizer["AllocatedFeedResources"])');
                            console.log('@Html.Raw(SharedLocalizer["GrossYieldOfPlantsEatenOnAverageCropYearDryWeight"])');
                            console.log('\t' + '@Html.Raw(SharedLocalizer["cha"])' + '\t' + '@Html.Raw(SharedLocalizer["сhaFeedUnits"])');
                            console.log('@Html.Raw(SharedLocalizer["Spring"])' + '\t' + features[0].get('ur_v') + '\t' + features[0].get('korm_v'));
                            console.log('@Html.Raw(SharedLocalizer["Summer"])' + '\t' + features[0].get('ur_l') + '\t' + features[0].get('korm_l'));
                            console.log('@Html.Raw(SharedLocalizer["Autumn"])' + '\t' + features[0].get('ur_o') + '\t' + features[0].get('korm_o'));
                            console.log('@Html.Raw(SharedLocalizer["Winter"])' + '\t' + features[0].get('ur_z') + '\t' + features[0].get('korm_z'));
                            console.log('@Html.Raw(SharedLocalizer["RecommendationForUse"]): ' + dataDB.pasturepol.recommend);
                            console.log('@Html.Raw(SharedLocalizer["RecomCattles"]): ' + dataDB.pasturepol.recomcatt);
                            console.log('----------------------------------------------');
                        },
                        error: function () {
                        }
                    })
                }
            });
        }
    })
</script>

@* CATO *@
<script>
    var cato = new Array();
    @foreach (CATO cATO in ViewBag.CATO)
    {
        @:var cato_new = {};
        @:cato_new["te"] = '@cATO.TE';
        @:cato_new["ab"] = '@cATO.AB';
        @:cato_new["cd"] = '@cATO.CD';
        @:cato_new["ef"] = '@cATO.EF';
        @:cato_new["hij"] = '@cATO.HIJ';
        @:cato_new["name"] = '@Html.Raw(cATO.Name)';
        @:cato.push(cato_new);
    }
    $('#cato1').append($("<option />"));
    $.each(cato, function () {
        if (this.cd == '00') {
            $('#cato1').append($("<option />").val(this.te).text(this.name));
        }
    });

    function ChangeCATO1() {
        NavigateToCATO($('#cato1').val(), 1);
        var ab = $('#cato1').val().substr(0, 2);
        $('#cato2').empty();
        $('#cato3').empty();
        $('#cato2').append($("<option />"));
        $.each(cato, function () {
            if (this.ef == '00' && this.ab == ab && this.cd != '00') {
                $('#cato2').append($("<option />").val(this.te).text(this.name));
            }
        });
    }

    function ChangeCATO2() {
        NavigateToCATO($('#cato2').val(), 2);
        var ab = $('#cato2').val().substr(0, 2),
            cd = $('#cato2').val().substr(2, 2);
        $('#cato3').empty();
        $('#cato3').append($("<option />"));
        $.each(cato, function () {
            if (this.hij == '000' && this.ab == ab && this.cd == cd && this.ef != '00') {
                $('#cato3').append($("<option />").val(this.te).text(this.name));
            }
        });
    }

    function ChangeCATO3() {
        NavigateToCATO($('#cato3').val(), 3);
    }

    var first_admXpol_Navigate = true;
    function NavigateToCATO(te, layer) {
        if (Layer_admXpol_Navigate.getSource() != null) {
            Layer_admXpol_Navigate.getSource().clear();
        }
        if (te == '') {
            return;
        }
        var filter = "kato_te = '" + te + "'";
        var filterParams = {
            'FILTER': null,
            'CQL_FILTER': null,
            'FEATUREID': null
        };
        if (filter.replace(/^\s\s*/, '').replace(/\s\s*$/, '') != "") {
            filterParams["CQL_FILTER"] = filter;
        }
        url_admXpol_Navigate = geoserver_url + geoserver_workspace_name + "/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=" + geoserver_workspace_name + ":adm" + layer.toString() + "pol&CQL_FILTER=" + filter + "&outputFormat=text/javascript&format_options=callback:getJson";
        $.ajax({
            jsonp: false,
            jsonpCallback: 'getJson',
            type: 'GET',
            url: url_admXpol_Navigate,
            async: false,
            dataType: 'jsonp',
            success: function (data_admXpol_Navigate) {
                var new_source = new ol.source.Vector({
                    features: (new ol.format.GeoJSON()).readFeatures(data_admXpol_Navigate, {
                        featureProjection: 'EPSG:3857'
                    })
                });
                Layer_admXpol_Navigate.setSource(new_source);
                map.getView().fit(Layer_admXpol_Navigate.getSource().getExtent());
                if (first_admXpol_Navigate) {
                    map.addLayer(Layer_admXpol_Navigate);
                    first_admXpol_Navigate = false;
                }
            }
        });
    }
</script>

@* FindPastures *@
<script>
    function FindPastures() {
        var otdely_id = $('#find_otdel').val(),
            class_id = $('#find_ptype').val(),
            group_id = $('#find_soob').val(),
            ur_v_from = $('#find_ur_v_from').val().replace(',', '.'),
            ur_v_to = $('#find_ur_v_to').val().replace(',', '.'),
            ur_l_from = $('#find_ur_l_from').val().replace(',', '.'),
            ur_l_to = $('#find_ur_l_to').val().replace(',', '.'),
            ur_o_from = $('#find_ur_o_from').val().replace(',', '.'),
            ur_o_to = $('#find_ur_o_to').val().replace(',', '.'),
            ur_z_from = $('#find_ur_z_from').val().replace(',', '.'),
            ur_z_to = $('#find_ur_z_to').val().replace(',', '.'),
            recommend = $('#find_recommend').val(),
            recomcattle = $('#find_recomcattle').val();
        filter_found = '';
        if (otdely_id != '') {
            if (filter_found.length == 0) {
                filter_found = "otdely_id = '" + otdely_id + "'";
            }
            else {
                filter_found += " && otdely_id = '" + otdely_id + "'";
            }
        }
        if (class_id != '') {
            if (filter_found.length == 0) {
                filter_found = "class_id = '" + class_id + "'";
            }
            else {
                filter_found += " && class_id = '" + class_id + "'";
            }
        }
        if (group_id != '') {
            if (filter_found.length == 0) {
                filter_found = "group_id = '" + group_id + "'";
            }
            else {
                filter_found += " && group_id = '" + group_id + "'";
            }
        }
        if (ur_v_from != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_v >= " + ur_v_from + "";
            }
            else {
                filter_found += " && ur_v >= " + ur_v_from + "";
            }
        }
        if (ur_v_to != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_v <= " + ur_v_to + "";
            }
            else {
                filter_found += " && ur_v <= " + ur_v_to + "";
            }
        }
        if (ur_l_from != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_l >= " + ur_l_from + "";
            }
            else {
                filter_found += " && ur_l >= " + ur_l_from + "";
            }
        }
        if (ur_l_to != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_l <= " + ur_l_to + "";
            }
            else {
                filter_found += " && ur_l <= " + ur_l_to + "";
            }
        }
        if (ur_o_from != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_o >= " + ur_o_from + "";
            }
            else {
                filter_found += " && ur_o >= " + ur_o_from + "";
            }
        }
        if (ur_o_to != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_o <= " + ur_o_to + "";
            }
            else {
                filter_found += " && ur_o <= " + ur_o_to + "";
            }
        }
        if (ur_z_from != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_z >= " + ur_z_from + "";
            }
            else {
                filter_found += " && ur_z >= " + ur_z_from + "";
            }
        }
        if (ur_z_to != '') {
            if (filter_found.length == 0) {
                filter_found = "ur_z <= " + ur_z_to + "";
            }
            else {
                filter_found += " && ur_z <= " + ur_z_to + "";
            }
        }
        if (recommend != '') {
            if (filter_found.length == 0) {
                filter_found = "recommend_ = '" + recommend + "'";
            }
            else {
                filter_found += " && recommend_ = '" + recommend + "'";
            }
        }
        if (recomcattle != '') {
            if (filter_found.length == 0) {
                filter_found = "recom_catt = '" + recomcattle + "'";
            }
            else {
                filter_found += " && recom_catt = '" + recomcattle + "'";
            }
        }
        if (filter_found.length == 0) {
            filter_found = "otdely_id = 'none'";
        }
        filterParams_found = {
            'FILTER': null,
            'CQL_FILTER': null,
            'FEATUREID': null
        };
        if (filter_found.replace(/^\s\s*/, '').replace(/\s\s*$/, '') != "") {
            filterParams_found["CQL_FILTER"] = filter_found;
        }
        Layer_found_pasturepol.getSource().updateParams(filterParams_found);
        Layer_found_pasturepol.getSource().refresh();
    }
</script>

@* InfoCATO, ChartCATO, TableCATO *@
<script>
    var ctx = document.getElementById('chart').getContext('2d');
    var chart = null;

    function random_rgba() {
        var o = Math.round, r = Math.random, s = 255;
        return 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';
    }

    function InfoCATO() {
        var te = $('#cato3').val(),
            te1 = $('#cato1').val(),
            te2 = $('#cato2').val(),
            te3 = $('#cato3').val();
        if (te3 == '') {
            te = te2;
        }
        if (te2 == '') {
            te = te1;
        }
        $.ajax({
            url: '@Url.Action("GetCATOPastureInfo")',
            data: { catote: te },
            type: 'POST',
            success: function (data) {
                ChartCATO(data.pasturepols_otdels);
                TableCATO(data.pasturepols_classes);
            },
            error: function () {
            }
        });
    }

    function ChartCATO(pasturepols) {
        var config = {
            type: 'pie',
            data: {
                datasets: [{
                    data: [],
                    backgroundColor: [],
                    label: 'Dataset 1'
                }],
                labels: []
            },
            options: {
                responsive: true,
                tooltips: {
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var dataset = data.datasets[tooltipItem.datasetIndex];
                            var meta = dataset._meta[Object.keys(dataset._meta)[0]];
                            var total = meta.total;
                            var currentValue = dataset.data[tooltipItem.index];
                            var percentage = parseFloat((currentValue / total * 100).toFixed(1));
                            return percentage + '%';
                        },
                        title: function (tooltipItem, data) {
                            return data.labels[tooltipItem[0].index];
                        }
                    }
                }
            }
        };
        for (var i = 0; i < pasturepols.length; ++i) {
            config.data.datasets[0].data.push(pasturepols[i].shape_area);
            config.data.datasets[0].backgroundColor.push(random_rgba());
            config.data.labels.push($("#find_otdel option[value=" + pasturepols[i].otdely_id + "]").text());
        }

        if (chart != null) {
            chart.destroy();
        }
        chart = new Chart(ctx, config);
    }

    function TableCATO(pasturepols) {
        for (var i = 0; i < pasturepols.length; ++i) {
            console.log(pasturepols[i].percent.toFixed(2) + '\t' + $("#find_ptype option[value=" + pasturepols[i].class_id + "]").text());
        }
    }
</script>

@*Sidebar Menu*@
<script>
    jQuery(document).ready(function () {
        /*
            Sidebar
        */
        $('.dismiss, .overlay').on('click', function () {
            $('.sidebar').removeClass('active');
        });

        $('.open-menu').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').addClass('active');
            // close opened sub-menus
            $('.collapse.show').toggleClass('show');
            $('a[aria-expanded=true]').attr('aria-expanded', 'false');
        });
        /* change sidebar style */
        $('a.btn-customized-dark').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').removeClass('light');
        });
        $('a.btn-customized-light').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').addClass('light');
        });


    });
</script>

@*tooltips, modal windows*@
<script>
    $(document).ready(function () {
        // Find by Adm
        new jBox('Modal', {
            attach: '#FindByKato',
            theme: 'TooltipBorderThick',
            width: 300,
            height: 280,
            blockScroll: false,
            animation: 'zoomIn',
            draggable: 'title',
            closeButton: true,
            content: $('#FilterKato'),
            title: 'Поиск по КАТО',
            overlay: false,
            reposition: false,
            repositionOnOpen: false
        });
        // Map Title
        new jBox('Modal', {
            attach: '#MapTitleBtn',
            theme: 'TooltipBorder',
            width: 260,
            blockScroll: false,
            animation: 'flip',
            closeButton: false,
            position: {
                x: 'right',
                y: 'top'
            },
            offset: {
                x: -10,
                y: 70
            },
            content: (
                '<h5 class="Card-title text-center text-white">Map title</h5>' +
                '<p class="card-text text-center text-white">This content is a little bit longer.</p>'
            ),
            overlay: false,
            reposition: true,
            repositionOnOpen: false
        }).open();
        // Map Legend
        new jBox('Modal', {
            autoOpen: true,
            attach: '#LegendBtn',
            theme: 'TooltipBorder',
            width: 250,
            blockScroll: false,
            animation: 'flip',
            closeButton: true,
            position: {
                x: 'right',
                y: 'bottom'
            },
            offset: {
                x: -10,
                y: -90
            },
            content: '<div class="p-0"><img id="legend" class="card-img-top" src="/images/Legends/LegendNDVI.svg"></div>',
            overlay: false,
            reposition: true,
            repositionOnOpen: false
        }).open();
        // Tooltip below to the right
        new jBox('Tooltip', {
            theme: 'TooltipDark',
            attach: '.SomeInfo',
            getTitle: 'InfoTitle',
            closeOnMouseleave: true,
            pointer: 'center:-20',
            maxWidth: 400,
            minWidth: 100,
            adjustPosition: true,
            adjustTracker: true
        });
    });
</script>