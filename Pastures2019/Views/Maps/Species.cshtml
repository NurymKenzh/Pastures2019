@using Pastures2019.Controllers
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResources> SharedLocalizer
@{
    ViewData["Title"] = SharedLocalizer["Species"];
    Layout = "~/Views/Shared/_LayoutMap.cshtml";
}
<link href="~/lib/ol/ol.css" rel="stylesheet" />
<link rel="stylesheet" href="~/lib/vendor/font-awesome/css/font-awesome.min.css" />
<script src="~/lib/ol/ol.js"></script>
<link href="~/lib/vendor/jBox/dist/jBox.all.css" rel="stylesheet" />
<script src="~/lib/vendor/jBox/dist/jBox.all.js"></script>
<link href="~/lib/сhart.js/dist/Chart.css" rel="stylesheet" />
<script src="~/lib/сhart.js/dist/Chart.js"></script>

<div class="container-fluid sticky-top p-0">
    <!-- Sidebar -->
    <nav class="sidebar border border-light">
        <div class="page-wrapper chiller-theme">
            <!-- close sidebar menu -->
            <div class="dismiss">
                <i class="fa fa-arrow-left"></i>
            </div>
            <div class="logo">
                <h3>Pasture</h3>
            </div>
            <div class="col">
                <form>
                </form>
            </div>
            <!-- Exaple 1 -->
            <div class="treeextent scrollbar-deep-purple bordered-deep-purple thin">
                <div class="card-body">
                    @*@Html.DropDownList("Otdel", (IEnumerable<SelectListItem>)ViewBag.Otdel, "", htmlAttributes: new { @id = "find_otdel" })
        @Html.DropDownList("PType", (IEnumerable<SelectListItem>)ViewBag.PType, "", htmlAttributes: new { @id = "find_ptype" })
        @Html.DropDownList("Soob", (IEnumerable<SelectListItem>)ViewBag.Soob, "", htmlAttributes: new { @id = "find_soob" })
        <input id="find_ur_v_from" type="text" />
        <input id="find_ur_v_to" type="text" />
        <input id="find_ur_l_from" type="text" />
        <input id="find_ur_l_to" type="text" />
        <input id="find_ur_o_from" type="text" />
        <input id="find_ur_o_to" type="text" />
        <input id="find_ur_z_from" type="text" />
        <input id="find_ur_z_to" type="text" />
        @Html.DropDownList("Recommend", (IEnumerable<SelectListItem>)ViewBag.Recommend, "", htmlAttributes: new { @id = "find_recommend" })
        @Html.DropDownList("RecomCattle", (IEnumerable<SelectListItem>)ViewBag.RecomCattle, "", htmlAttributes: new { @id = "find_recomcattle" })
        <input type="button" value="Find" onclick="FindPastures()" />*@

                    @*<select id="cato1" onchange="ChangeCATO1()"></select>
        <select id="cato2" onchange="ChangeCATO2()"></select>
        <select id="cato3" onchange="ChangeCATO3()"></select>
        <input type="button" value="CATO Info" onclick="InfoCATO()" />*@

                    <select id="layerBaseType" class="form-control form-control-sm" onchange="ChangeLayers()">
                        <option value="OSM">OpenStreetMap</option>
                        <option value="BingAerialWithLabels">Bing Aerial</option>
                        <option value="BingRoadStatic">Bing Road (static)</option>
                        <option value="BingRoadDynamic">Bing Road (dynamic)</option>
                        <option value="HERENormalDay">HERE Normal Day</option>
                        <option value="HERENormalDayTransit">HERE Normal Day Transit</option>
                        <option value="HERETerrainDay">HERE Terrain Day</option>
                        <option value="HEREHybridDay" selected>HERE Hybrid Day</option>
                        <option value="StamenWatercolor">Stamen Watercolor</option>
                        <option value="StamenTerrain">Stamen Terrain</option>
                        <option value="StamenToner">Stamen Toner</option>
                        <option value="ArcGIS">ArcGIS</option>
                        <option value="ThunderforestOpenCycleMap">Thunderforest OpenCycleMap</option>
                        <option value="ThunderforestTransport">Thunderforest Transport</option>
                        <option value="ThunderforestLandscape">Thunderforest Landscape</option>
                        <option value="ThunderforestOutdoors">Thunderforest Outdoors</option>
                        <option value="ThunderforestSpinalMap">Thunderforest Spinal Map</option>
                        <option value="ThunderforestPioneer">Thunderforest Pioneer</option>
                        <option value="ThunderforestMobileAtlas">Thunderforest Mobile Atlas</option>
                        <option value="ThunderforestNeighbourhood">Thunderforest Neighbourhood</option>
                    </select>
                    <input type="checkbox" id="layerBaseShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerBaseShow">
                        @SharedLocalizer["BaseLayer"]
                    </label>
                    <input id="layerBaseOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layeradmxpolShow" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layeradmxpolShow">
                        @SharedLocalizer["admxpolLayer"]
                    </label>
                    <input id="layeradmxpolOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerhdrShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerhdrShow">
                        @SharedLocalizer["hdrLayer"]
                    </label>
                    <input id="layerhdrOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerpopShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerpopShow">
                        @SharedLocalizer["popLayer"]
                    </label>
                    <input id="layerpopOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerrdslinShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerrdslinShow">
                        @SharedLocalizer["rdslinLayer"]
                    </label>
                    <input id="layerrdslinOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />

                    <input type="checkbox" id="layerspeciesXShow" checked="checked" onchange="ChangeLayers()">
                    <label class="form-check-label text-white" for="layerspeciesXShow">
                        @SharedLocalizer["speciesXLayer"]
                    </label>
                    <br />
                    <input id="radiosok" type="radio" name="speciesX" value="species3" checked onclick="ChangeLayers()">@SharedLocalizer["RuralCounties"]<br>
                    <input id="radioray" type="radio" name="speciesX" value="species2" onclick="ChangeLayers()">@SharedLocalizer["Districts"]<br>
                    <input id="radioobl" type="radio" name="speciesX" value="species1" onclick="ChangeLayers()">@SharedLocalizer["Areas"]<br>
                    <input id="layerspeciesXOpacity" type="range" class="form-control-range" min="0" max="100" value="100" oninput="ChangeLayers()" />
                </div>
            </div>
            <!-- Exaple 1 -->
            <div class="dark-light-buttons">
                <a class="btn btn-primary btn-customized-4 btn-customized-dark" href="#" role="button">Dark</a>
                <a class="btn btn-primary btn-customized-4 btn-customized-light" href="#" role="button">Light</a>
            </div>
            <div class="sidebar-footer">
                <a href="#">
                    <i class="SomeInfo fa fa-file" InfoTitle="Tooltip on top"></i>
                </a>
                <a href="#" OnClick="Charts()" id="ChartsButton" value="Выделять" onclick="Charts()">
                    <i class="SomeInfo fa fa-bar-chart-o" InfoTitle="Для построение Графика, сначало выберите объект на карте (ВХБ или БХУ)"></i>
                    <span id="chartSpan" class="badge badge-pill badge-warning notification">0</span>
                </a>
                <a href="#" id="LegendBtn" class="target-click">
                    <i class="SomeInfo fa fa-list-alt" InfoTitle="Легенда"></i>
                </a>
                <a href="#" id="MapTitleBtn" class="target-click">
                    <i class="SomeInfo fa fa-bookmark" InfoTitle="Информация о слое"></i>
                </a>
            </div>
        </div>
    </nav>
    <!-- End sidebar -->
    <!-- Content -->
    <div class="content">
        <!-- open sidebar menu -->
        <a class="btn btn-light btn-customized open-menu" href="#" role="button">
            <i class="fa fa-align-left"></i> <span>@SharedLocalizer["Menu"]</span>
        </a>
        <!-- Map content -->
        <div id="map" class="position-fixed col-md-12 ml-sm-auto col-lg-12 p-0" style="height: calc(100% - 100px);"></div>
    </div>
    <!-- End content -->
</div>

@* layers *@
<script>
    var geoserver_url = '@ViewBag.GeoServerUrl', //'http://89.250.84.186:8080/geoserver/',
        geoserver_workspace_name = 'Pastures2019';
    var HEREappId = 'SLdBasp4s1oq2oUbVGxy';
    var HEREappCode = 'D9-h9iVhjgUB_9eUlFETXA';

    var Source_OSM = new ol.source.OSM();
    Source_BingAerialWithLabels = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'AerialWithLabels',
    });
    Source_BingRoadStatic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'Road',
    });
    Source_BingRoadDynamic = new ol.source.BingMaps({
        key: 'AmYNYRGlIrw_kppWvrIhfzY1v046b4Ft5nopz6Av94XDvTTo8xTkHCEaZ_zMwCOJ',
        imagerySet: 'RoadOnDemand',
    });
    var urlTpl = 'https://{1-4}.{base}.maps.cit.api.here.com' +
        '/{type}/2.1/maptile/newest/{scheme}/{z}/{x}/{y}/256/png' +
        '?app_id={app_id}&app_code={app_code}';
    function HEREcreateUrl(tpl, HERElayerDesc) {
        return tpl
            .replace('{base}', HERElayerDesc.base)
            .replace('{type}', HERElayerDesc.type)
            .replace('{scheme}', HERElayerDesc.scheme)
            .replace('{app_id}', HERElayerDesc.app_id)
            .replace('{app_code}', HERElayerDesc.app_code);
    };
    var HERElayerDescNormalDay = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });
    var HERElayerDescNormalDayTransit = {
        base: 'base',
        type: 'maptile',
        scheme: 'normal.day.transit',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERENormalDayTransit = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescNormalDayTransit),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });
    var HERElayerDescTerrainDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'terrain.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HERETerrainDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescTerrainDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' +
            '<a href="http://developer.here.com">HERE</a>'
    });
    var HERElayerDescHybridDay = {
        base: 'aerial',
        type: 'maptile',
        scheme: 'hybrid.day',
        app_id: HEREappId,
        app_code: HEREappCode
    };
    var Source_HEREHybridDay = new ol.source.XYZ({
        url: HEREcreateUrl(urlTpl, HERElayerDescHybridDay),
        attributions: 'Map Tiles &copy; ' + new Date().getFullYear() + ' ' + '<a href="http://developer.here.com">HERE</a>'
    });
    var Source_StamenWatercolor = new ol.source.Stamen({
        layer: 'watercolor'
    });
    var Source_StamenTerrain = new ol.source.Stamen({
        layer: 'terrain'
    });
    var Source_StamenToner = new ol.source.Stamen({
        layer: 'toner'
    });
    var Source_ArcGIS = new ol.source.XYZ({
        attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
            'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
            'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
    });
    var Source_ThunderforestOpenCycleMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestTransport = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestLandscape = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestOutdoors = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestTransportDark = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestSpinalMap = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestPioneer = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/pioneer/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestMobileAtlas = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Source_ThunderforestNeighbourhood = new ol.source.XYZ({
        url: 'https://{a-c}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png' +
            '?apikey=6746f4299ea3479aba8726b09f049c1b'
    });
    var Layer_Base = new ol.layer.Tile({
        source: Source_HEREHybridDay
    });
    Layer_Base.set('name', 'Base');
    Layer_Base.setOpacity(1);

    var url_adm1pol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_adm1pol = new ol.source.TileWMS({
        url: url_adm1pol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':adm1pol'
        },
        serverType: 'geoserver'
    });
    var Layer_adm1pol = new ol.layer.Tile({
        source: Source_adm1pol
    });
    Layer_adm1pol.set('name', 'admxpol');
    Layer_adm1pol.setVisible(false);

    var url_adm2pol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_adm2pol = new ol.source.TileWMS({
        url: url_adm2pol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':adm2pol'
        },
        serverType: 'geoserver'
    });
    var Layer_adm2pol = new ol.layer.Tile({
        source: Source_adm2pol
    });
    Layer_adm2pol.set('name', 'admxpol');
    Layer_adm2pol.setVisible(false);

    var url_adm3pol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_adm3pol = new ol.source.TileWMS({
        url: url_adm3pol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':adm3pol'
        },
        serverType: 'geoserver'
    });
    var Layer_adm3pol = new ol.layer.Tile({
        source: Source_adm3pol
    });
    Layer_adm3pol.set('name', 'admxpol');
    Layer_adm3pol.setVisible(false);

    var Layer_admXpol_Navigate = new ol.layer.Vector({
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'transparent'
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 4
            })
        })
    });
    Layer_admXpol_Navigate.set('name', 'admxpolnavigate');

    var url_hdrlin = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_hdrlin = new ol.source.TileWMS({
        url: url_hdrlin,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':hdrlin'
        },
        serverType: 'geoserver'
    });
    var Layer_hdrlin = new ol.layer.Tile({
        source: Source_hdrlin,
        maxResolution: ol.tilegrid.createXYZ().getResolution(7)
    });
    Layer_hdrlin.set('name', 'hdr');

    var url_hdrpol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_hdrpol = new ol.source.TileWMS({
        url: url_hdrpol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':hdrpol'
        },
        serverType: 'geoserver'
    });
    var Layer_hdrpol = new ol.layer.Tile({
        source: Source_hdrpol
    });
    Layer_hdrpol.set('name', 'hdr');

    var url_poppnt = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_poppnt = new ol.source.TileWMS({
        url: url_poppnt,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':poppnt'
        },
        serverType: 'geoserver'
    });
    var Layer_poppnt = new ol.layer.Tile({
        source: Source_poppnt,
        maxResolution: ol.tilegrid.createXYZ().getResolution(9)
    });
    Layer_poppnt.set('name', 'pop');

    var url_poppol = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_poppol = new ol.source.TileWMS({
        url: url_poppol,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':poppol'
        },
        serverType: 'geoserver'
    });
    var Layer_poppol = new ol.layer.Tile({
        source: Source_poppol
    });
    Layer_poppol.set('name', 'hdr');

    var url_rdslin = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_rdslin = new ol.source.TileWMS({
        url: url_rdslin,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':rdslin'
        },
        serverType: 'geoserver'
    });
    var Layer_rdslin = new ol.layer.Tile({
        source: Source_rdslin
    });
    Layer_rdslin.set('name', 'rdslin');

    var url_species1 = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_species1 = new ol.source.TileWMS({
        url: url_species1,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':species1'
        },
        serverType: 'geoserver'
    });
    var Layer_species1 = new ol.layer.Tile({
        source: Source_species1
    });
    Layer_species1.set('name', 'speciesX');
    Layer_species1.set('subname', 'species1');
    Layer_species1.setVisible(false);

    var url_species2 = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_species2 = new ol.source.TileWMS({
        url: url_species2,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':species2'
        },
        serverType: 'geoserver'
    });
    var Layer_species2 = new ol.layer.Tile({
        source: Source_species2
    });
    Layer_species2.set('name', 'speciesX');
    Layer_species2.set('subname', 'species2');
    Layer_species2.setVisible(false);

    var url_species3 = geoserver_url + geoserver_workspace_name + '/wms';
    var Source_species3 = new ol.source.TileWMS({
        url: url_species3,
        params: {
            'FORMAT': 'image/png',
            'VERSION': '1.1.1',
            tiled: true,
            'LAYERS': geoserver_workspace_name + ':species3'
        },
        serverType: 'geoserver'
    });
    var Layer_species3 = new ol.layer.Tile({
        source: Source_species3
    });
    Layer_species3.set('name', 'speciesX');
    Layer_species3.set('subname', 'species3');
</script>

@* map *@
<script>
    // permalink
    var zoom = 5;
    var center = ol.proj.fromLonLat([66.902, 48.714]);
    var rotation = 0;
    if (window.location.hash !== '') {
        // try to restore center, zoom-level and rotation from the URL
        var hash = window.location.hash.replace('#map=', '');
        var parts = hash.split('/');
        if (parts.length === 4) {
            zoom = parseInt(parts[0], 10);
            center = [
                parseFloat(parts[1]),
                parseFloat(parts[2])
            ];
            rotation = parseFloat(parts[3]);
        }
    }

    var map = new ol.Map({
        target: 'map',
        controls: new ol.control.defaults({ attributionOptions: { collapsible: true } }).extend([
            new ol.control.ScaleLine()
        ]),
        layers: [
            Layer_Base,
            Layer_species1,
            Layer_species2,
            Layer_species3,
            Layer_hdrlin,
            Layer_rdslin,
            Layer_adm1pol,
            Layer_adm2pol,
            Layer_adm3pol,
            Layer_poppol,
            Layer_poppnt,
            Layer_hdrpol
        ],
        view: new ol.View({
            center: center,
            zoom: 5,
            minZoom: 5,
            extent: [5028944.964937042, 4754994.655562972, 10214432.963802021, 7494497.74930296]
        })
    });

    // permalink
    var shouldUpdate = true;
    var view = map.getView();
    var updatePermalink = function () {
        if (!shouldUpdate) {
            // do not update the URL when the view was changed in the 'popstate' handler
            shouldUpdate = true;
            return;
        }
        var center = view.getCenter();
        var hash = '#map=' +
            view.getZoom() + '/' +
            Math.round(center[0] * 100) / 100 + '/' +
            Math.round(center[1] * 100) / 100 + '/' +
            view.getRotation();
        var state = {
            zoom: view.getZoom(),
            center: view.getCenter(),
            rotation: view.getRotation()
        };
        window.history.pushState(state, 'map', hash);
    };

    map.on('moveend', updatePermalink);

    window.addEventListener('popstate', function (event) {
        if (event.state === null) {
            return;
        }
        map.getView().setCenter(event.state.center);
        map.getView().setZoom(event.state.zoom);
        map.getView().setRotation(event.state.rotation);
        shouldUpdate = false;
    });
</script>

@* ChangeLayers *@
<script>
    function ChangeLayers() {
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') == 'Base') {
                layer.setVisible(document.getElementById("layerBaseShow").checked);
                layer.setOpacity($('#layerBaseOpacity').val() / 100)
                if ($('#layerBaseType').val() == 'OSM') {
                    layer.setSource(Source_OSM);
                }
                else if ($('#layerBaseType').val() == 'BingAerialWithLabels') {
                    layer.setSource(Source_BingAerialWithLabels);
                }
                else if ($('#layerBaseType').val() == 'BingRoadStatic') {
                    layer.setSource(Source_BingRoadStatic);
                }
                else if ($('#layerBaseType').val() == 'BingRoadDynamic') {
                    layer.setSource(Source_BingRoadDynamic);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDay') {
                    layer.setSource(Source_HERENormalDay);
                }
                else if ($('#layerBaseType').val() == 'HERENormalDayTransit') {
                    layer.setSource(Source_HERENormalDayTransit);
                }
                else if ($('#layerBaseType').val() == 'HERETerrainDay') {
                    layer.setSource(Source_HERETerrainDay);
                }
                else if ($('#layerBaseType').val() == 'HEREHybridDay') {
                    layer.setSource(Source_HEREHybridDay);
                }
                else if ($('#layerBaseType').val() == 'StamenWatercolor') {
                    layer.setSource(Source_StamenWatercolor);
                }
                else if ($('#layerBaseType').val() == 'StamenTerrain') {
                    layer.setSource(Source_StamenTerrain);
                }
                else if ($('#layerBaseType').val() == 'StamenToner') {
                    layer.setSource(Source_StamenToner);
                }
                else if ($('#layerBaseType').val() == 'ArcGIS') {
                    layer.setSource(Source_ArcGIS);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOpenCycleMap') {
                    layer.setSource(Source_ThunderforestOpenCycleMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransport') {
                    layer.setSource(Source_ThunderforestTransport);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestLandscape') {
                    layer.setSource(Source_ThunderforestLandscape);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestOutdoors') {
                    layer.setSource(Source_ThunderforestOutdoors);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestTransportDark') {
                    layer.setSource(Source_ThunderforestTransportDark);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestSpinalMap') {
                    layer.setSource(Source_ThunderforestSpinalMap);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestPioneer') {
                    layer.setSource(Source_ThunderforestPioneer);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestMobileAtlas') {
                    layer.setSource(Source_ThunderforestMobileAtlas);
                }
                else if ($('#layerBaseType').val() == 'ThunderforestNeighbourhood') {
                    layer.setSource(Source_ThunderforestNeighbourhood);
                }
            }
            if (layer.get('name') == 'admxpol') {
                layer.setVisible(document.getElementById("layeradmxpolShow").checked);
                layer.setOpacity($('#layeradmxpolOpacity').val() / 100);
            }
            if (layer.get('name') == 'hdr') {
                layer.setVisible(document.getElementById("layerhdrShow").checked);
                layer.setOpacity($('#layerhdrOpacity').val() / 100);
            }
            if (layer.get('name') == 'pop') {
                layer.setVisible(document.getElementById("layerpopShow").checked);
                layer.setOpacity($('#layerpopOpacity').val() / 100);
            }
            if (layer.get('name') == 'rdslin') {
                layer.setVisible(document.getElementById("layerrdslinShow").checked);
                layer.setOpacity($('#layerrdslinOpacity').val() / 100);
            }
            if (layer.get('name') == 'speciesX') {
                layer.setOpacity($('#layerspecies1Opacity').val() / 100);
                layer.setVisible(false);
                if (layer.get('subname') == $('input[name="speciesX"]:checked').val()) {
                    layer.setVisible(document.getElementById("layerspeciesXShow").checked);
                }
            }
        })
    }
</script>

@*Sidebar Menu*@
<script>
    jQuery(document).ready(function () {
        /*
            Sidebar
        */
        $('.dismiss, .overlay').on('click', function () {
            $('.sidebar').removeClass('active');
        });

        $('.open-menu').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').addClass('active');
            // close opened sub-menus
            $('.collapse.show').toggleClass('show');
            $('a[aria-expanded=true]').attr('aria-expanded', 'false');
        });
        /* change sidebar style */
        $('a.btn-customized-dark').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').removeClass('light');
        });
        $('a.btn-customized-light').on('click', function (e) {
            e.preventDefault();
            $('.sidebar').addClass('light');
        });


    });
</script>

@*tooltips, modal windows*@
<script>
    $(document).ready(function () {

        // Map Title
        new jBox('Modal', {
            attach: '#MapTitleBtn',
            theme: 'TooltipBorder',
            width: 260,
            blockScroll: false,
            animation: 'flip',
            closeButton: false,
            position: {
                x: 'right',
                y: 'top'
            },
            offset: {
                x: -10,
                y: 70
            },
            content: (
                '<h5 class="Card-title text-center text-white">Map title</h5>' +
                '<p class="card-text text-center text-white">This content is a little bit longer.</p>'
            ),
            overlay: false,
            reposition: true,
            repositionOnOpen: false
        }).open();
        // Map Legend
        new jBox('Modal', {
            autoOpen: true,
            attach: '#LegendBtn',
            theme: 'TooltipBorder',
            width: 250,
            blockScroll: false,
            animation: 'flip',
            closeButton: true,
            position: {
                x: 'right',
                y: 'bottom'
            },
            offset: {
                x: -10,
                y: -90
            },
            content: '<div class="p-0"><img id="legend" class="card-img-top" src="/images/Legends/LegendNDVI.svg"></div>',
            overlay: false,
            reposition: true,
            repositionOnOpen: false
        }).open();
        // Tooltip below to the right
        new jBox('Tooltip', {
            theme: 'TooltipDark',
            attach: '.SomeInfo',
            getTitle: 'InfoTitle',
            closeOnMouseleave: true,
            pointer: 'center:-20',
            maxWidth: 400,
            minWidth: 100,
            adjustPosition: true,
            adjustTracker: true
        });
    });
</script>